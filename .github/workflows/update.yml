name: Check for and apply updates

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update.yml'
  schedule:
    - cron: "15 4 * * *"

jobs:
  update:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Check & Update Pkgs
        id: upgrades
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          for pkg in ./pkgs/*; do
            pkg_name=$(basename $pkg)
            if [[ $(yq 'has("redistribute")' ${pkg}/config.yml) == "true" ]]; then
              for abi_arch in $(yq '.redistribute.version | keys[]' ${pkg}/config.yml); do
                url_base=$(yq '.redistribute.repo' ${pkg}/config.yml)""
                path=$(yq '.redistribute.path' ${pkg}/config.yml | cut -f1 -d'/')
                url="${url_base}/$(echo ${abi_arch} | tr - :)/${path}/packagesite.pkg"
                if [ ! -f ${abi_arch}-${path}-packagesite.yaml ]; then
                  echo "Loading packagesite.pkg from: ${url}"
                  curl -sSL -o ${abi_arch}-${path}-packagesite.pkg ${url}
                  tar -O -xf ./${abi_arch}-${path}-packagesite.pkg packagesite.yaml \
                    > ${abi_arch}-${path}-packagesite.yaml
                  sed -e 's/$/,/' -i ${abi_arch}-${path}-packagesite.yaml
                  sed -i '1i[' ${abi_arch}-${path}-packagesite.yaml
                  echo "]" >> ${abi_arch}-${path}-packagesite.yaml
                fi
                remote_version=$(yq ".[] | select(.name == \"${pkg_name}\") | .version" ${abi_arch}-${path}-packagesite.yaml)
                if [ -z "$remote_version" ]; then
                  echo "${pkg_name} not found in packagesite.yaml from ${url}"
                  exit 1
                fi
                local_version=$(yq ".redistribute.version.${abi_arch}" ${pkg}/config.yml)
                if [[ "${remote_version}" != "${local_version}" ]]; then
                  echo "pkg_upgraded=true" >> $GITHUB_OUTPUT
                  echo "Upgrading: ${pkg_name}, from: ${local_version} to: ${remote_version}"
                  yq e -i ".redistribute.version.${abi_arch} = \"${remote_version}\"" ${pkg}/config.yml
                fi
              done
            else
              repo_url=$(yq '.build_config.include.src_repo' ${pkg}/config.yml)
              if [[ ${repo_url} =~ "github.com" ]]; then
                local_version=$(yq ".pkg_manifest.version" ${pkg}/config.yml)
                repo=$(echo "${repo_url}" | sed -E 's|https://github.com/([^/]+/[^/]+).*|\1|')
                remote_version=$(gh api repos/${repo}/releases/latest | jq -r '.tag_name' | sed 's/^[^0-9]*//')
                if [ -z "$remote_version" ]; then
                  echo "${pkg_name} no release found under: https://github.com/repos/${repo}/releases"
                  exit 1
                fi
                if [[ "${remote_version}" != "${local_version}" ]]; then
                  echo "pkg_upgraded=true" >> $GITHUB_OUTPUT
                  echo "${pkg_name}, upgrading from: ${local_version} to: ${remote_version}"
                  yq e -i ".pkg_manifest.version = \"${remote_version}\"" ${pkg}/config.yml
                fi
              fi
            fi
          done
          git clean -fxd

      - name: Create Pull Request
        if: steps.upgrades.outputs.pkg_upgraded == 'true'
        id: pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.app-token.outputs.token }}
          committer: ${{ steps.app-token.outputs.app-slug }}[bot] <${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>
          author: ${{ steps.app-token.outputs.app-slug }}[bot] <${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>
          branch: auto-update
          title: Auto Upgrades
          labels: |
            automated pr
            update
          body: |
            ${{ steps.upgrades.outputs.stdout }}

      - name: Enable Pull Request auto merge
        if: steps.pr.outputs.pull-request-operation == 'created'
        run: gh pr merge --auto "${{ steps.pr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
